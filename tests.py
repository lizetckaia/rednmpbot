import unittest
from unittest.mock import MagicMock
from bot import info, unknown



async def async_magic():
    pass


MagicMock.__await__ = lambda x: async_magic().__await__()


class MyTestCase(unittest.TestCase):
    def test_info(self):
        bot = MagicMock()
        context = MagicMock(bot=bot)
        effective_chat = MagicMock(id=123)
        update = MagicMock(effective_chat=effective_chat)
        info(update=update, context=context)
        bot.send_message.assert_called_with(chat_id=123, text = '–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–∞–º—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∞–Ω–æ–Ω—Å—ã –∏–∑ –º–∏—Ä–∞ –∫–∏–Ω–æ, '
                                                                '—Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –∞–Ω–∏–º–µ - –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. '
                                                                '–ê –µ—â—ë –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞–±–ª–∏–∫, '
                                                                '–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É nmp ü•∫üëâüëà')
    def test_unknown(self):
        bot = MagicMock()
        context = MagicMock(bot=bot)
        effective_chat = MagicMock(id=123)
        update = MagicMock(effective_chat=effective_chat)
        info(update=update, context=context)
        bot.send_message.assert_called_with(chat_id=123, text="–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å... –ú–æ–∂–µ—Ç /info?")




if __name__ == '__main__':
    unittest.main()
